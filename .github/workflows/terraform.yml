---
name: WEBSITE INFRA CREATION | ANSIBLE CONFIGURATION | SITE DEPLOYMENT
run-name: "[${{ github.event_name }} - ${{ github.ref_name }}] Terraform executed by @${{ github.actor }}"

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  terraformVersion: 1.3.6
  terraformWorkDir: ./
  terraformBucket: aseemit-site-tf-state
  terraformDynamo: aseemit-site-tf-state
  terraformS3Acl: bucket-owner-full-control
  terraformS3Encryption: true
  terraformBucketKey: ${{ secrets.ACCOUNT_ID }}/${{ github.ref_name }}.tfstate

  envDev: "dev"
  envProd: "prod"
  awsRegion: "us-east-1"
  awsAccountNumber: ${{ secrets.ACCOUNT_ID }}
  githubToken: ${{secrets.TOKEN_GITHUB}}

jobs:
  lint:
    name: Terraform Lint
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4.1.1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.0.0
        with:
          terraform_version: ${{ env.terraformVersion }}

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.awsAccountNumber }}:role/GitHub-OIDC-Role
          role-session-name: OIDCSession
          aws-region: ${{ env.awsRegion }}

      - name: Terraform Format
        run: terraform fmt --check

      - name: Terraform Initialize
        id: init
        run: |
          cd ${{ env.terraformWorkDir }}
          terraform init -backend-config="bucket=${{ env.terraformBucket }}" -backend-config="dynamodb_table=${{ env.terraformDynamo }}" -backend-config="key=${{ env.terraformBucketKey}}" -backend-config="region=${{ env.awsRegion }}" -backend-config="acl=${{ env.terraformS3Acl }}" -backend-config="encrypt=${{ env.terraformS3Encryption }}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

  Infra:
    name: Terraform Plan|Apply
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Sets env vars for development environment
        run: |
          echo "awsIamRole=arn:aws:iam::${{ env.awsAccountNumber }}:role/GitHub-OIDC-Role" >> $GITHUB_ENV
          echo "terraformBucket=${{ env.terraformBucket }}" >> $GITHUB_ENV
          echo "terraformDynamo=${{ env.terraformDynamo }}" >> $GITHUB_ENV
          echo "terraformBucketKey=${{ env.terraformBucketKey }}" >> $GITHUB_ENV
          echo "varfile=${{ env.envDev }}.tfvars" >> $GITHUB_ENV
        if: ${{ (github.ref_name == 'dev') || ( github.base_ref == 'dev') }}

      - name: Sets env vars for production environment
        run: |
          echo "awsIamRole=arn:aws:iam::${{ env.awsAccountNumber }}:role/GitHub-OIDC-Role" >> $GITHUB_ENV
          echo "terraformBucket=${{ env.terraformBucket }}" >> $GITHUB_ENV
          echo "terraformDynamo=${{ env.terraformDynamo }}" >> $GITHUB_ENV
          echo "terraformBucketKey=${{ env.terraformBucketKey }}" >> $GITHUB_ENV
          echo "varfile=${{ env.envProd }}.tfvars" >> $GITHUB_ENV
        if: ${{ (github.ref_name == 'main') || ( github.base_ref == 'main') }}

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.awsAccountNumber }}:role/GitHub-OIDC-Role
          role-session-name: OIDCSession
          aws-region: ${{ env.awsRegion }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.terraformVersion }}

      - name: Terraform Initialize
        id: init
        run: |
          cd ${{ env.terraformWorkDir }}
          terraform init -backend-config="bucket=${{ env.terraformBucket }}" -backend-config="dynamodb_table=${{ env.terraformDynamo }}" -backend-config="key=${{ env.terraformBucketKey}}" -backend-config="region=${{ env.awsRegion }}" -backend-config="acl=${{ env.terraformS3Acl }}" -backend-config="encrypt=${{ env.terraformS3Encryption }}"

      - name: Terraform Plans for push
        id: plan
        if: github.event_name == 'push'
        continue-on-error: true
        run: |
          cd ${{ env.terraformWorkDir }}
          terraform plan  -var-file=./environment/${{ env.varfile }} -no-color -out tfplan

      - name: Terraform Plans for workflow_dispatch
        id: plan_workflow_dispatch
        if: github.event_name == 'workflow_dispatch'
        continue-on-error: true
        run: |
          cd ${{ env.terraformWorkDir }}
          terraform plan -var-file=./environment/${{ env.varfile }} -no-color -out tfplan

      - name: Upload Terraform Plan File
        if: steps.plan.outcome == 'success' && github.event_name == 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: ${{ env.terraformWorkDir }}/tfplan
          retention-days: 3

      - name: Terraform Show
        if: steps.plan.outcome == 'success' && github.event_name == 'pull_request'
        id: show
        run: |-
          echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' | tail -c 35000 \
          | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > /tmp/plan.txt
          PLAN=$(cat /tmp/plan.txt)

      - name: Post Plan to GitHub PR
        if: steps.plan.outcome == 'success' && github.event_name == 'pull_request'
        uses: mshick/add-pr-comment@v2
        with:
          allow-repeats: true
          repo-token: ${{ secrets.TOKEN_GITHUB }}
          message: |
            ## Terraform Plan
            ### Environment: ${{ github.base_ref }}
            ### Region: us-east-1
            ***Author***: `${{ github.actor }}` ***Action***: `${{ github.event_name }}`
            ***Working Directory***: `${{ env.terraformWorkDir }}`
            ***Workflow***: `${{ github.workflow }}`
            this is test
            Please review below Terraform plan before accepting merge request:
            ```diff
            ${{ steps.plan.outputs.stdout }}
            ```
        continue-on-error: true

      - name: Post Plan Failure
        if: steps.plan.outcome == 'failure'
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.TOKEN_GITHUB }}
          message: |
            ## Terraform Plan
            ### Environment: ${{ github.base_ref }}
            ### Region: us-east-1
            ***Author***: `${{ github.actor }}` ***Action***: `${{ github.event_name }}`
            ***Working Directory***: `${{ env.terraformWorkDir }}`
            ***Workflow***: `${{ github.workflow }}`
            ```
            ${{ steps.plan.outputs.stderr }}
            ```

      - name: Stop pipeline if failed
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply for push
        if: github.event_name == 'push'
        id: apply
        run: |
          cd ${{ env.terraformWorkDir }}
          terraform apply -auto-approve -var-file=./environment/"${{ env.varfile }}" -no-color

      - name: Terraform Apply for workflow_dispatch
        if: github.event_name == 'workflow_dispatch'
        id: apply_workflow_dispatch
        run: |
          cd ${{ env.terraformWorkDir }}
          terraform apply -auto-approve -var-file=./environment/"${{ env.varfile }}" -no-color
