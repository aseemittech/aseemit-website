---
name: WEBSITE INFRA CREATION | ANSIBLE CONFIGURATION | SITE DEPLOYMENT
run-name: "[${{ github.event_name }} - ${{ github.ref_name }}] Terraform executed by @${{ github.actor }}"

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  terraformVersion: 1.3.6
  terraformWorkDir: ./
  terraformBucket: aseemit-tf-states
  terraformDynamo: aseemit-tf-states
  terraformS3Acl: bucket-owner-full-control
  terraformS3Encryption: true
  terraformBucketKey: ${{ secrets.ACCOUNT_ID }}/${{ github.ref_name }}.tfstate

  awsRegion: "ap-south-1"
  awsAccountNumber: ${{ secrets.ACCOUNT_ID }}
  githubToken: ${{secrets.TOKEN_GITHUB}}

jobs:
  lint:
    name: Terraform Lint
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4.1.1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.0.0
        with:
          terraform_version: ${{ env.terraformVersion }}

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.awsAccountNumber }}:role/GitHub-OIDC-Role
          role-session-name: OIDCSession
          aws-region: ${{ env.awsRegion }}

      - name: Terraform Format
        run: terraform fmt --check

      - name: Terraform Initialize
        id: init
        run: |
          cd ${{ env.terraformWorkDir }}
          terraform init -backend-config="bucket=${{ env.terraformBucket }}" -backend-config="dynamodb_table=${{ env.terraformDynamo }}" -backend-config="key=${{ env.terraformBucketKey}}" -backend-config="region=${{ env.awsRegion }}" -backend-config="acl=${{ env.terraformS3Acl }}" -backend-config="encrypt=${{ env.terraformS3Encryption }}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

  Infra:
    name: Terraform Plan|Apply
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Boto3 Botocore  ansible
        run: |
          pip install boto3 botocore ansible pymysql

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.awsAccountNumber }}:role/GitHub-OIDC-Role
          role-session-name: OIDCSession
          aws-region: ${{ env.awsRegion }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.terraformVersion }}

      - name: Terraform Initialize
        id: init
        run: |
          cd ${{ env.terraformWorkDir }}
          terraform init -backend-config="bucket=${{ env.terraformBucket }}" -backend-config="dynamodb_table=${{ env.terraformDynamo }}" -backend-config="key=${{ env.terraformBucketKey}}" -backend-config="region=${{ env.awsRegion }}" -backend-config="acl=${{ env.terraformS3Acl }}" -backend-config="encrypt=${{ env.terraformS3Encryption }}"

      - name: Terraform Format
        run: |
          cd ${{ env.terraformWorkDir }}
          terraform fmt --check

      - name: Terraform validate
        run: |
          cd ${{ env.terraformWorkDir }}
          terraform validate -no-color

      - name: Terraform Plans
        id: plan
        continue-on-error: true
        run: |
          cd ${{ env.terraformWorkDir }}
          terraform plan  -var-file="terraform.tfvars"

      - name: Terraform Apply
        id: apply
        continue-on-error: true
        run: |
          cd ${{ env.terraformWorkDir }}
          terraform apply -auto-approve -var-file="terraform.tfvars"

      - name: Terraform output
        id: output
        run: |
          cd ${{ env.terraformWorkDir }}
          terraform output -json > terraform_output.json
